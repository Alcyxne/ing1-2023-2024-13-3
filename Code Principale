#include <allegro.h>

#define BUTTON_WIDTH 100 // Définir la largeur du bouton
#define BUTTON_HEIGHT 50 // Définir la hauteur du bouton
#define GRID_WIDTH 20
#define GRID_HEIGHT 12
#define SCREEN_WIDTH (40 * GRID_WIDTH)
#define SCREEN_HEIGHT (40 * GRID_HEIGHT)
#define SPEED 6

// Structure pour représenter un bloc
typedef struct {eee
    int x, y; // Coordonnées du bloc
    int width, height; // Largeur et hauteur du bloc
} Block;

// Fonction pour vérifier si deux blocs sont en collision
int check_collision(Block block1, Block block2) {
    return (block1.x + block1.width >= block2.x &&
            block1.y + block1.height >= block2.y &&
            block1.x <= block2.x + block2.width &&
            block1.y <= block2.y + block2.height);
}

int main() {
    allegro_init();
    install_keyboard();
    install_mouse();
    set_color_depth(32);
    set_gfx_mode(GFX_AUTODETECT_WINDOWED, SCREEN_WIDTH, SCREEN_HEIGHT, 0, 0);
    show_mouse(screen);

    // Chargement de l'image d'accueil et du bouton jouer
    BITMAP *accueil = load_bitmap("136912-space-colorful-galaxy-stars-artwork-fantasy_art-digital_art-nebula-planet-TylerCreatesWorlds-space_art.bmp", NULL); // Assurez-vous que "accueil.bmp" est le chemin correct vers votre image d'accueil
    BITMAP *bouton_jouer = load_bitmap("148744.bmp", NULL); // Assurez-vous que "jouer.bmp" est le chemin correct vers votre image de bouton

    // Vérifier si les images ont été chargées correctement
    if (!accueil || !bouton_jouer) {
        allegro_message("Erreur de chargement des images.");
        return -1;
    }

    // Coordonnées pour centrer le bouton sur l'écran
    int bouton_x = (SCREEN_WIDTH - BUTTON_WIDTH) / 2;
    int bouton_y = (SCREEN_HEIGHT - BUTTON_HEIGHT) / 2;

    // Afficher l'écran d'accueil
    blit(accueil, screen, 0, 0, 0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);
    draw_sprite(screen, bouton_jouer, bouton_x, bouton_y);

    // Attendre le clic de la souris sur le bouton jouer
    while (!mouse_b) {
        if (mouse_x > bouton_x && mouse_x < bouton_x + BUTTON_WIDTH &&
            mouse_y > bouton_y && mouse_y < bouton_y + BUTTON_HEIGHT &&
            (mouse_b & 1)) { // Bouton de la souris cliqué
            break; // Sortir de la boucle si l'utilisateur a cliqué sur le bouton jouer
        }
        rest(10); // Pour limiter l'utilisation du CPU
    }

    int x = 0, y = 0;
    int velX = 0, velY = 0;
    int done = 0;
    int bloc_pris = 0; // Variable pour suivre si le bloc est pris ou non
    int bloc_lache = 0; // Variable pour suivre si le bloc est lâché ou non
    Block player_block; // Bloc du joueur
    Block static_red_block; // Bloc statique rouge sur le côté droit de l'écran
    Block mini_red_block; // Bloc miniature rouge suivi par le joueur
    BITMAP *player_image, *background_image;

    // Charger l'image du joueur
    player_image = load_bitmap("Capture d'écran 2024-03-28 094739.bmp", NULL);
    if (!player_image) {
        allegro_message("Erreur de chargement de l'image du joueur");
        return -1;
    }

    // Charger l'image de fond
    background_image = load_bitmap("Capture d'écran 2024-03-28 100813.bmp", NULL);
    if (!background_image) {
        allegro_message("Erreur de chargement de l'image de fond");
        destroy_bitmap(player_image);
        return -1;
    }

    // Initialiser les coordonnées et la taille du bloc du joueur
    player_block.x = 0;
    player_block.y = 0;
    player_block.width = player_image->w;
    player_block.height = player_image->h;

    // Initialiser les coordonnées et la taille du bloc rouge statique
    static_red_block.x = SCREEN_WIDTH - 50;
    static_red_block.y = SCREEN_HEIGHT / 2;
    static_red_block.width = 50;
    static_red_block.height = 50;

    // Boucle de jeu principale
    while (!done) {
        if (keypressed()) {
            if (key[KEY_UP]) velY = -SPEED;
            if (key[KEY_DOWN]) velY = SPEED;
            if (key[KEY_LEFT]) velX = -SPEED;
            if (key[KEY_RIGHT]) velX = SPEED;
            if (key[KEY_ESC]) done = 1;
            if (key[KEY_E] && !bloc_pris && !bloc_lache) {
                // Si la touche 'E' est pressée et aucun bloc n'est pris ni lâché, le joueur prend le bloc rouge
                if (check_collision(player_block, static_red_block)) {
                    bloc_pris = 1;
                    mini_red_block.x = player_block.x + player_block.width;
                    mini_red_block.y = player_block.y;
                    mini_red_block.width = 10;
                    mini_red_block.height = 10;
                }
            } else if (key[KEY_T] && bloc_pris && !bloc_lache) {
                // Si la touche 'T' est pressée et un bloc est déjà pris et non lâché, le joueur lâche le bloc rouge
                bloc_lache = 1;
                mini_red_block.x = x;
                mini_red_block.y = y + player_block.height;
            } else if (key[KEY_A] && bloc_lache && !bloc_pris) {
                // Si la touche 'A' est pressée et un bloc est déjà lâché et aucun n'est pris, le joueur reprend le bloc rouge
                if (check_collision(player_block, mini_red_block)) {
                    bloc_pris = 1;
                }
            }

            clear_keybuf();
        }

        // Mise à jour de la position du joueur
        x += velX;
        y += velY;

        // Mettre à jour les coordonnées du bloc du joueur
        player_block.x = x;
        player_block.y = y;

        // Contrôle des limites
        if (x < 0) x = 0;
        if (y < 0) y = 0;
        if (x > SCREEN_WIDTH - player_block.width) x = SCREEN_WIDTH - player_block.width;
        if (y > SCREEN_HEIGHT - player_block.height) y = SCREEN_HEIGHT - player_block.height;

        // Vérifier la collision avec le bloc rouge statique
        if (check_collision(player_block, static_red_block)) {
            // Annuler le mouvement du joueur s'il entre en collision avec le bloc rouge statique
            if (velX > 0) x = static_red_block.x - player_block.width;
            else if (velX < 0) x = static_red_block.x + static_red_block.width;
            if (velY > 0) y = static_red_block.y - player_block.height;
            else if (velY < 0) y = static_red_block.y + static_red_block.height;
        }

        // Réinitialiser la vitesse si aucune touche n'est pressée
        velX = 0;
        velY = 0;

        // Dessin de l'image de fond et du joueur
        draw_sprite(screen, background_image, 0, 0);
        draw_sprite(screen, player_image, x, y);

        // Dessiner le bloc rouge statique
        rectfill(screen, static_red_block.x, static_red_block.y,
                 static_red_block.x + static_red_block.width, static_red_block.y + static_red_block.height,
                 makecol(255, 0, 0));

        // Dessiner la version miniature du bloc rouge s'il est pris et non lâché
        if (bloc_pris && !bloc_lache) {
            mini_red_block.x = player_block.x + player_block.width;
            mini_red_block.y = player_block.y;
            rectfill(screen, mini_red_block.x, mini_red_block.y,
                     mini_red_block.x + mini_red_block.width, mini_red_block.y + mini_red_block.height,
                     makecol(255, 0, 0));
        } else if (bloc_lache) {
            // Si le bloc est lâché, le dessiner par terre à côté du joueur
            rectfill(screen, mini_red_block.x, mini_red_block.y,
                     mini_red_block.x + mini_red_block.width, mini_red_block.y + mini_red_block.height,
                     makecol(255, 0, 0));
        }

        rest(20); // Ajustez cette valeur si nécessaire
    }

    // Libérer la mémoire allouée pour les images bitmap
    destroy_bitmap(accueil);
    destroy_bitmap(bouton_jouer);
    destroy_bitmap(player_image);
    destroy_bitmap(background_image);
    allegro_exit();
    return 0;
}
END_OF_MAIN()
